#!/usr/bin/ruby

require 'prerequisite'
require 'pathname'
require 'fileutils'
require 'avail'

module Utility
		

	# Check and set path to all the required tools and software
	#Use prerequisite shell script
	# find out if some programmes are not installed.
	def Utility.checkAndSetTools
		check = Prerequisite.new
		check.checkTools
		exit
	end	

	# def Utility.createDatabase

	# 	files = Dir.glob("*.fastq.gz")
	# 	if files.is_a?(Array) and !files.empty?

	# 		Utility.mergeZippedFiles(files[0], files[1])

	# 		Utility.convertQ2A(file)
	# end	

	def Utility.createDbFasta(prefix, array)
		
		Avail.makeDir("DB")		
		
		if array.is_a?(Array)
			cmd = "cat #{array[0]} #{array[1]} > #{prefix}.fasta"
			Avail.executeCmd(cmd) 
		else 
			raise "Expected Array Value to create a final fasta file!"	
		end

	end

	# check the write permission of $workDir before building of the work directory
	def Utility.checkPermissions(file)
		#path = File.absolute_Path(file)
		
		if File.exist?(file) && File.executable?(file)
			return true
		else
			return false
		end	

	end

	def Utility.fileType(file)	
		
		ex = File.extname(file)
		
		if ex.eql?(".fasta") || ex.eql?(".fa") || ex.eql?(".fsa")
			return "fasta"
		elsif ex.eql?(".gz")
			return "zipped"
		elsif ex.eql?(".fastq")
			return "fastq"
		else
			return "other"
		end

	end

	def Utility.navigate(folder)
		
		temp = ""
		setpath = Avail.setDir
		FileUtils.cd(setpath)
		
		if File.directory?(folder)
			temp = File.join(setpath, folder)
			FileUtils.cd(temp)
			puts "Current working directory is moved to #{folder}"
		else
			puts "ERROR::Data folder is not found!"
			puts "If Data folder is not available, create a folder and name it Data and dump all your raw data files!"
			exit
		end

		return temp

	end

	def Utility.mergeZippedFiles(file1, file2, prefix)
		r1 = File.expand_path(file1)
		puts r1.to_s
		r2 = File.expand_path(file2)
		puts r2.to_s
		name = File.basename(file1, "*.fastq.gz")
		outfile = "#{prefix}_merged.fastq"
		cmd = "zcat #{r1} #{r2} > #{outfile}"
		puts "Merging zipped fastq files!"
		Avail.executeCmd(cmd)
		puts "This is the ourput of mergeZipped method #{outfile}"
		return outfile
	end	

	def Utility.unzip(file)		
		#Avail.navigate(dir)
		#raise "Error while moving to database directory!!" unless Dir.pwd.eql?(setpath)
		cmd = "gzip -d #{file}"
		Avail.executeCmd(cmd)
	end	

	# check whether fasta file exist and how many sequences it contains
	def Utility.countSeq(file)
		
		cmd = "grep -c '^>' #{file}"
		
		count = `#{cmd}`
		
		return count
	end

	def Utility.convertQ2A(file, prefix)
		
		name = File.basename(file, ".*")
		outfile = "#{name}.fasta"
		
		if name.empty?
		
			puts "Error::FastQ File not found!"
		
		else
			
			if defined? prefix
				cmd = "seqtk seq -A #{file} > #{prefix}.fasta"
				Avail.executeCmd(cmd)			
				return "#{prefix}.fasta"
			else
				cmd = "seqtk seq -A #{file} > #{outfile}"
				Avail.executeCmd(cmd)	
				return "#{outfile}.fasta"
			end
		end	

	end	

	def Utility.directory_exists?(dir)
		
		Avail.setDir
		
		if File.directory?(dir)
			Avail.navigate(dir)
		else
			puts "#{dir} does not exist. Check again!"
		end	
	end

	def Utility.checkFileExist(file)

		if File.exist?(file) and File.executable?(file)
			return true
		else
			return false
		end		

	end	


	def Utility.moveFilesToTmp(args)
		
		args.each do |file|
			
			path = File.expand_path("../../", file)
			Avail.createDir("tmp")
			
			#FileUtils.mv 'stuff.rb', '/notexist/lib/ruby', :force => true  # no error 
			FileUtils.mv file, File.join(path, "tmp"), :force => true

			return true
		end
	end

		

	# check whether the necessary perl scripts exist and cand be found


	def Utility.intro 
		puts "							" 
		puts "##############################################################################"
		puts "							"  
		puts "Welcome to iTransMap"
		puts "An interactive ruby program for the extension of incompletely/partially"
		puts "assembled transcripts (generated by de-novo transcriptome assemblers)"
		puts "using whole transcriptome (RNA-Seq) data!"
		puts " 																		"	  
		puts "Kumar Saurabh Singh"
		puts "k.saurabh-singh@exeter.ac.uk"
		puts "							"
		puts "###############################################################################"
		puts "							"
	end

	def Utility.copyright
		puts "Copyright 2016 Singh KS"
		puts "Licensed under the Apache License, version 2.0 (the \"License\"); You may not use this file except in compliance with the License. You may obtain a copy of the license at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the license is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the license"
	end  


end	