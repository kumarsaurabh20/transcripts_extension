#!/usr/bin/ruby

require 'prerequisite'
require 'pathname'
require 'fileutils'

module Utility

	BadRunError=Class.new(Exception)
		

	# Check and set path to all the required tools and software
	#Use prerequisite shell script
	# find out if some programmes are not installed.
	def Utility.checkAndSetTools
		check = Prerequisite.new
		check.checkTools
		exit
	end	

	# check the write permission of $workDir before building of the work directory
	def Utility.checkPermissions(file)
		#path = File.absolute_Path(file)
		
		if File.exist?(file) && File.executable?(file)
			return true
		else
			return false
		end	

	end

	def Utility.fileType(file)	
		
		ex = File.extname(file)
		
		if ex.eql?(".fasta") || ex.eql?(".fa") || ex.eql?(".fsa")
			return "fasta"
		elsif ex.eql?(".gz")
			return "zipped"
		elsif ex.eql?(".fastq")
			return "fastq"
		else
			return "other"
		end

	end

	def self.navigate(folder)
		
		setpath = self.setDir
		
		FileUtils.cd(setpath)
		
		if File.directory?(folder)
			FileUtils.cd(File.join(setpath, folder))
			puts "Current working directory is moved to #{folder}"
		else
			puts "ERROR::Data folder is not found!"
			puts "If Data folder is not available, create a folder and name it Data and dump all your raw data files!"
			exit
		end

	end

	def Utility.unzip(file, dir)		
		
		self.navigate(dir)
		#raise "Error while moving to database directory!!" unless Dir.pwd.eql?(setpath)
		cmd = "gzip -d #{file}"
		%x[ #{cmd} ]
		
		if $?.exitstatus == 0
			return true
		else
			raise BadRunError, "Error: Oops. Can not run the shell command!"
		end

	end	

	# check whether fasta file exist and how many sequences it contains
	def Utility.countSeq(file)
		
		cmd = "grep -c '^>' #{file}"
		
		count = `#{cmd}`
		
		return count
	end

	def Utility.convertQ2A(file)
		
		name = File.basename(file, ".*")
		
		if name.empty?
			puts "Error::FastQ File not found!"
		else
			cmd = "seqtk seq -A #{file} > #{name}.fasta"
			`#{cmd}`
			if $?.exitstatus == 0
				puts "FastA generated!"
			else
				raise BadRunError, "Error: Oops..Bad command execution!"
			end	 	  			
		end

	end	

	#http://code.tutsplus.com/tutorials/ruby-for-newbies-working-with-directories-and-files--net-18810
	def self.makeDir(dir)
		
		setpath = self.setDir
		
		FileUtils.cd(setpath)
		
		self.checkDirAtRootAndMake(dir)
		
		return true	
	end

	def self.checkDirAtRootAndMake(dir)
		
		if File.directory?(dir)
			
			FileUtils.rm_rf(dir)
			
			FileUtils.mkdir dir
			
			return true
		else	
			FileUtils.mkdir dir
			return true
		end	

	end	

	#Multiple arguments
	#http://stackoverflow.com/questions/831077/how-do-i-pass-multiple-arguments-to-a-ruby-method-as-an-array

	def Utility.createDbFasta(prefix, array)
		
		self.makeDir("DB")		
		
		if array.is_a?(Array)
			cmd = "cat #{array[0]} #{array[1]} > #{prefix}.fasta"
			`#{cmd}`
			if $?.exitstatus == 0
				puts "FastA Merged!"
			else
				raise BadRunError, "Error: Oops..Bad command execution!"
			end	 	 

		else 
			raise "Expected Array Value to create a final fasta file!"	
		end

	end	

	def Utility.expunge(file)

	end

	def self.setDir
		
		checkPath = File.expand_path("../../init.rb", __FILE__)
		
		return File.dirname(checkPath)
	end

	def Utility.directory_exists?(dir)
		
		self.setDir
		
		if File.directory?(dir)
			self.navigate(dir)
		else
			puts "#{dir} does not exist. Check again!"
		end	
	end

	def Utility.runCommand(cmd, args, output)
		puts "got #{cmd} and #{args.join(',')}"
	end	

	def Utility.moveFilesToTmp(args)
		
		args.each do |file|
			
			path = File.expand_path("../../", file)
			self.createDir("tmp")
			
			#FileUtils.mv 'stuff.rb', '/notexist/lib/ruby', :force => true  # no error 
			FileUtils.mv file, File.join(path, "tmp"), :force => true

			return true
		end
	end

	def self.createDir(dir)
		
		path = File.expand_path("../../", __FILE__)
		FileUtils.cd(path)
		FileUtils.mkdir dir, :mode => 0777
		
		return true
	end	

	def Utility.executeCmd(cmd)

		`#{cmd} 1> /dev/null 2> /dev/null`	if cmd.is_a?(String)
			
		if $?.exitstatus == 0
			return true
		else
			raise BadRunError, "Error: Oops..Bad command execution!"
		end		

	end	


	# check whether the necessary perl scripts exist and cand be found


	def Utility.intro 
		puts "							" 
		puts "##############################################################################"
		puts "							"  
		puts "Welcome to iTransMap"
		puts "An interactive ruby program for the extension of incompletely/partially"
		puts "assembled transcripts (generated by de-novo transcriptome assemblers)"
		puts "using whole transcriptome (RNA-Seq) data!"
		puts " 																		"	  
		puts "Kumar Saurabh Singh"
		puts "k.saurabh-singh@exeter.ac.uk"
		puts "							"
		puts "###############################################################################"
		puts "							"
	end

	def Utility.copyright
		puts "Copyright 2016 Singh KS"
		puts "Licensed under the Apache License, version 2.0 (the \"License\"); You may not use this file except in compliance with the License. You may obtain a copy of the license at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the license is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the license"
	end  


end	